{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAoCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA5CPL,EAAKa,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBACN,IAAMV,EAAQW,SAAShB,EAAKiB,SAASZ,MAAMa,OACrCC,EAAOH,SAAShB,EAAKiB,SAASE,KAAKD,QAM3C,SAAwBE,EAAQf,EAAOc,GAGrC,IAFA,IAAME,EAAW,GAERC,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAElC,GAAIH,EAAO,GAAKd,EAAQ,GAAKe,GAAU,EACvC,OAAOG,EAAAzB,GAAS0B,OAAOC,KAAK,8BAGtB,IAEEC,EAAUvB,EAFCmB,EACIjB,GAASiB,EAAI,GAAKH,GAGvCO,EACGC,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALvB,MACjB,OAAOkB,EAAAzB,GAAS0B,OAAOM,QAAQ,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAANF,EAAM,M,IAE9EG,OAAM,SAAAJ,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALvB,MAClB,OAAOkB,EAAAzB,GAAS0B,OAAOS,QAAQ,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAANF,EAAM,M,IAG9ER,EAASa,KAAKR,E,EAxBhBS,CAFenB,SAAShB,EAAKiB,SAASG,OAAOF,OAEtBb,EAAOc,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault(); \n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  createPromises(amount, delay, step);\n});\n\nfunction createPromises(amount, delay, step) {\n  const promises = [];\n\n  for (let i = 1; i <= amount; i++) {\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n  return Notiflix.Notify.info('🤌Сhoose the correct value');\n  }\n\n    const position = i;\n    const promiseDelay = delay + (i - 1) * step;\n    const promise = createPromise(position, promiseDelay);\n\n    promise\n      .then(({ position, delay }) => {\n        return Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        return Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    promises.push(promise);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","parseInt","elements","value","step","amount","promises","i","$parcel$interopDefault","Notify","info","promise","then","param","_$delay","success","concat","catch","failure","push","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.6b760470.js.map"}