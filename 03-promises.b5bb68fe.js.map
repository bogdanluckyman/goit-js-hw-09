{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAkCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CbL,EAAKa,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBACN,MAAMV,EAAQW,SAAShB,EAAKiB,SAASZ,MAAMa,OACrCC,EAAOH,SAAShB,EAAKiB,SAASE,KAAKD,QAM3C,SAAwBE,EAAQC,EAAOF,GACrC,MAAMG,EAAW,GAEjB,GADAtB,EAAKuB,QACDJ,EAAO,GAAKE,EAAQ,GAAKD,GAAU,EACvC,OAAOI,EAAA1B,GAAS2B,OAAOC,KAAK,8BAExB,IAAC,IAAIC,EAAI,EAAGA,GAAKP,EAAQO,IAAK,CAChC,MAEMC,EAAUzB,EAFCwB,EACIN,GAASM,EAAI,GAAKR,GAGvCS,EACGC,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,KACVmB,EAAA1B,GAAS2B,OAAOK,QAAQ,uBAAqB1B,QAAiBC,SAEtE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,KACXmB,EAAA1B,GAAS2B,OAAOO,QAAQ,sBAAoB5B,QAAeC,SAGtEiB,EAASW,KAAKL,E,EAtBhBM,CAFelB,SAAShB,EAAKiB,SAASG,OAAOF,OAEtBb,EAAOc,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault(); \n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  createPromises(amount, delay, step);\n});\n\nfunction createPromises(amount, delay, step) {\n  const promises = [];\n  form.reset()\n  if (step < 0 || delay < 0 || amount <= 0) {\n  return Notiflix.Notify.info('🤌Сhoose the correct value');\n  }\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const promiseDelay = delay + (i - 1) * step;\n    const promise = createPromise(position, promiseDelay);\n\n    promise\n      .then(({ position, delay }) => {\n        return Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        return Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    promises.push(promise);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","parseInt","elements","value","step","amount","delay1","promises","reset","$parcel$interopDefault","Notify","info","i","promise","then","success","catch","failure","push","$47d4ff9957288465$var$createPromises"],"version":3,"file":"03-promises.b5bb68fe.js.map"}